import { app, BrowserWindow, clipboard, dialog, ipcMain, Menu, MenuItem, shell } from 'electron';
import { DownloadEvent, IpcEvent, UiMode } from './constants';
import { Downloader } from './downloader';
import path from 'path';
import isDev from 'electron-is-dev';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createAppMenu = (mainWindow: BrowserWindow): Menu => {
  const menu = new Menu();

  const fileMenu = new MenuItem({
    label: 'File',
    submenu: [
      {
        label: 'Quit',
        role: 'quit'
      }
    ]
  });
  menu.append(fileMenu);

  const editMenu = new MenuItem({
    label: 'Edit',
    submenu: [
      {
        label: 'Undo',
        role: 'undo'
      },
      {
        label: 'Redo',
        role: 'redo'
      },
      {
        type: 'separator'
      },
      {
        label: 'Cut',
        role: 'cut'
      },
      {
        label: 'Copy',
        role: 'copy'
      },
      {
        label: 'Paste',
        role: 'paste'
      },
      {
        type: 'separator'
      },
      {
        label: 'Select All',
        role: 'selectAll'
      }
    ]
  });
  menu.append(editMenu);

  const viewMenu = new MenuItem({
    label: 'View',
    submenu: [
      {
        label: 'UI Mode',
        submenu: [
          {
            label: 'Light',
            type: 'radio',
            click: () => {
              mainWindow.webContents.send(IpcEvent.SetUiMode, UiMode.Corporate);
            }
          },
          {
            label: 'Dark',
            type: 'radio',
            click: () => {
              mainWindow.webContents.send(IpcEvent.SetUiMode, UiMode.Business);
            }
          },
          {
            label: 'Synthwave',
            type: 'radio',
            click: () => {
              mainWindow.webContents.send(IpcEvent.SetUiMode, UiMode.Synthwave);
            }
          }
        ]
      },
    ]
  });
  menu.append(viewMenu);

  const windowMenu = new MenuItem({
    label: 'Window',
    submenu: [
      {
        label: 'Minimize',
        role: 'minimize'
      },
    ]
  })
  menu.append(windowMenu);

  const helpMenu = new MenuItem({
    label: 'Help',
    submenu: [
      {
        label: 'YT Download on GitHub',
        click: async () => {
          await shell.openExternal('https://github.com/rBurgett/yt-download');
        }
      },
      {
        label: 'YT-DLP on GitHub',
        click: async () => {
          await shell.openExternal('https://github.com/yt-dlp/yt-dlp');
        }
      }
    ]
  });
  menu.append(helpMenu);

  return menu;
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 240,
    width: 560,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  const menu = createAppMenu(mainWindow);
  Menu.setApplicationMenu(menu);

  ipcMain
    .removeAllListeners(IpcEvent.UiModeSet)
    .on(IpcEvent.UiModeSet, (_, arg: UiMode) => {
      const viewMenu = menu.items.find(item => item.label === 'View');
      if (viewMenu) {
        const uiModeMenu = viewMenu.submenu.items.find(item => item.label === 'UI Mode');
        if (uiModeMenu) {
          const themeLabel = arg === UiMode.Business ? 'Dark' : arg === UiMode.Corporate ? 'Light' : arg === UiMode.Synthwave ? 'Synthwave' : '';
          const uiModeItem = uiModeMenu.submenu.items.find(item => item.label === themeLabel);
          if (uiModeMenu) {
            uiModeItem.checked = true;
          }
        }
      }
    });

  ipcMain
    .removeAllListeners(IpcEvent.StartDownload)
    .handle(IpcEvent.StartDownload, async (_, url: string): Promise<string> => {
      return new Promise(async (resolve, reject) => {
        const idPatt = /v=(\w+)/;
        const matches = url.match(idPatt);
        const id = matches ? matches[1] : `${Date.now()}`;
        const { filePath, canceled } = await dialog.showSaveDialog(mainWindow, {
          defaultPath: `${id}.mp4`,
          filters: [
            {extensions: ['mp4'], name: 'MP4 Video'},
          ],
        });
        if (canceled) {
          resolve("");
          return;
        }

        const downloader = new Downloader();
        downloader.on(DownloadEvent.Info, info => {
          mainWindow.webContents.send(IpcEvent.DownloadProgress, info);
          console.log('Info:', info);
        });
        downloader.on(DownloadEvent.Error, info => {
          mainWindow.webContents.send(IpcEvent.DownloadProgress, info);
          console.log('Error:', info);
        });
        downloader.on(DownloadEvent.Done, (code: number) => {
          console.log('Done:', code);
        });
        const filename = path.basename(filePath);

        downloader
          .start(url, filePath)
          .then(() => {
            console.log('Finished!');
            resolve(filename);
          })
          .catch(err => {
            console.error(err);
            reject(err);
          });
      });
    });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
    .catch(console.error);

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools();
  }
};

ipcMain.handle(IpcEvent.GetClipboardText, async (event): Promise<string> => {
  return clipboard.readText();
});

ipcMain.on(IpcEvent.GetVersion, event => {
  event.returnValue = app.getVersion();
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
